{{ template "base" . }}
    {{ define "title" }}
        Virtual Terminal
    {{ end }}


    {{ define "content" }}
        <h2 class="mt-2 text-center"> Virtual Terminal </h2>
        <hr>

        <div class="alert alert-danger text-center d-none" id="card-messages"></div>

        <form
            action="/payment-succeeded"
            method="post"
            name="change_form"
            id="change_form"
            class="d-block needs-validation charge-form"
            autocomplete="off"
            novalidate>

            <div class="mb-3">
                <label for="amount" class="form-label">Amount</label>
                <input type="text" class="form-control" id="amount" name="amount" required autocomplete="amount-new">
            </div>

            <div class="mb-3">
                <label for="cardholder-name" class="form-label">Card Name</label>
                <input type="text" class="form-control" id="cardholder-name" name="cardholder_name" required autocomplete="cardholder-name-new">
            </div>

            <div class="mb-3">
                <label for="cardholder-email" class="form-label">Card Email</label>
                <input type="email" class="form-control" id="cardholder-email" name="email" required autocomplete="cardholder-email-new">
            </div>

            <div class="mb-3">
                <label for="card-element" class="form-label">Credit Card</label>
                <div id="card-element" class="form-control"></div>
                <div class="alert-danger text-center" id="card-errors" role="alert"></div>
                <div class="alert-success text-center" id="card-success" role="alert"></div>
            </div>

            <input type="hidden" name="payment_intent" id="payment_intent">
            <input type="hidden" name="payment_method" id="payment_method">
            <input type="hidden" name="payment_amount" id="payment_amount">
            <input type="hidden" name="payment_currency" id="payment_currency">
        </form>

        <hr>

        <a href="javascript:void(0)" id="pay-button" class="btn btn-primary" onclick="val()">
            Charge Card
        </a>
        <div id="processing-payment" class="text-center d-none">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        
    {{ end }}

    {{ define "js" }}
        <script src="https://js.stripe.com/v3/"></script>
        <script>
            let card;
            let stripe;
            const cardMessages = document.getElementById('card-messages');
            const payButton = document.getElementById('pay-button');
            const processing = document.getElementById('processing-payment');

            stripe = new Stripe({{ index .StringMap "publishable_key" }});

            function hidePayButton() {
                payButton.classList.add('d-none');
                processing.classList.remove('d-none');
            }

            function showPayButtons() {
                payButton.classList.remove('d-none');
                processing.classList.add('d-none');
            }

            function showCardError(msg) {
                cardMessages.classList.add('alert-danger');
                cardMessages.classList.remove('alert-success');
                cardMessages.classList.remove('d-none');
                cardMessages.innerText = msg;
            }

            function showCardSuccess() {
                cardMessages.classList.remove('alert-danger');
                cardMessages.classList.remove('alert-success');
                cardMessages.classList.remove('d-none');
                cardMessages.innerText = "Transaction Successfully!";
            }

            function val() {
                let form = document.getElementById('change_form');
                if (form.checkValidity() === false) {
                    this.event.preventDefault();
                    this.event.stopPropagation();

                    form.classList.add('was-validated');
                    return;
                }

                form.classList.add('was-validated');
                hidePayButton();

                let amountCharge = String(parseFloat(document.getElementById('amount').value) * 100)
                let payload = {
                    amount: amountCharge,
                    currency: 'cad',
                }

                const requestOpts = {
                    method: 'post',
                    headers: {
                        'Accept': 'application/json',
                        'Content': 'application/json',
                    },
                    body: JSON.stringify(payload),
                }

                fetch('{{ .API }}/api/payment-intent', requestOpts).then(res => res.text()).then(res => {
                    let data;
                    try {
                        data = JSON.parse(res);
                        stripe.confirmCardPayment(data.client_secret, {
                            payment_method: {
                                card: card,
                                billing_details: {
                                    name: document.getElementById('cardholder-name').value,
                                }
                            }
                        }).then(function(result) {
                            if (result.error) {
                                showCardError(result.error.message);
                                showPayButtons();
                            } else if (result.paymentIntent) {
                                if (result.paymentIntent.status === "succeeded") {
                                    document.getElementById('payment_method').value = result.paymentIntent.payment_method_types[0];
                                    document.getElementById('payment_intent').value = result.paymentIntent.id;
                                    document.getElementById('payment_amount').value = result.paymentIntent.amount;
                                    document.getElementById('payment_currency').value = result.paymentIntent.currency;
                                    // document.getElementById('cardholder-email').value = result.paymentIntent.email;
                                    processing.classList.add('d-none');
                                    showCardSuccess();

                                    document.getElementById("change_form").submit();
                                }
                            }
                        });
                    } catch (e) {
                        console.log('e', e);
                        showCardError("Invalid response payment gateway");
                        showPayButtons();
                    }
                })
            }

            (function() {
                // create stripe
                const elements = stripe.elements();
                const style = {
                    base: {
                        fontSize: '16px',
                        lineHeight: '24px'
                    }
                }

                // create card entire
                card = elements.create('card', {
                    style: style,
                    hidePostalCode: true,
                });
                card.mount('#card-element');

                // check error
                card.addEventListener('change', (event) => {
                    var displayErrors = document.getElementById('card-errors');
                    if (event.error) {
                        displayErrors.classList.remove('d-none');
                        displayErrors.textContent = event.error.message;
                    } else {
                        displayErrors.classList.add('d-none');
                        displayErrors.textContent = "";
                    }
                })
            })();
        </script>
    {{ end }}
